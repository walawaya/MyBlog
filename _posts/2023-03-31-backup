---
title: "2023-03-31-backup of article: Tutorial: Deploy stable-diffusion-webui on Google Cloud Computing #9131"
date: 2023-03-31
---

# Why Google Cloud
Hello there😉, I am a newbie in programming and everything I am about to say, but I think it's worth sharing the deployment solution I came up with ☁ Google Cloud Computing. 

Many have shared their CoLab deployments which are awesome but since I was not sure about their paid "compute units", I thought I would go for a pay-as-you-go style from Google Cloud. Colab-free is only good if you want to get a feeling of the powerful professional GPUs, but is inconvenient for extended use  #1814. 

While CoLab does have an option to connect with Google Cloud, it requires a little more resource than what our webui needs. And a cherry on the top is the super low Spot (preemptible) price of Google Cloud you may take advantage of (not available for Colab). I feel one can get maybe 1000-2000 512x512 pictures for $1 of Spot machine over a few hours but I haven't particularly benchmarked.

Another thing of note is the use of firewall rule (**Step 1.5**) to avoid exposing your webui to the public. (Although it would also be difficult to find you with such a complex URL generated by gradio with the `--share` option. And you can set usr/pw in the launch arguments.)

**Before you start**, please make sure you know some Linux command line; You have a payment method for Google Cloud and don't care wasting a few dollars for the cloud machines you used.

# 1. Set up a Google Cloud billing account
Understandably, Google Cloud doesn't allow you free use of their GPU, so you will pay for each second of GPU+CPU usage. If you are new to Google Cloud, you may have **free credit** in a trial period which can pay for a lot of things, excluding GPU instances 😥.

We will follow this guidance with modifications.
https://cloud.google.com/compute/docs/create-linux-vm-instance

- Follow through the "**Before you begin**" section to set up your account.

Please take some time to familiarize yourself with the UI of Google Cloud and the [price sheet](https://cloud.google.com/compute/all-pricing) of Google Cloud. Keep in mind that **data traffic from the cloud virtual machine to yourself (from Google to Internet to your browser) will incur a charge after the [free ](https://cloud.google.com/free/docs/free-cloud-features#free-tier-usage-limits)1 GB/month in North America**. For people generating much more images, you will be smart enough to find a way.
If you are not sure, after finishing and moving all your images to your local device, just delete all the instances, delete all the disks in the console and you will be most probably free from unexpected charges.

# 1.5 (optional) Set up a firewall rule for direct private access to the webui
(Or you can use `--share` option if you do want to generate a public link)

- In the search box on the top of Google Cloud console, search for "**firewall**" and go to VPC network >> **Firewall** page.
- At the top bar, click **CREATE FIREWALL RULE**, give it a name.
- Direction of traffic: Ingress (Default)
- Action on match: Allow (Default)
- Targets: **All instances in the network**
- Source filter: IPv4 ranges. **Then put your own IP address in the Source range box**. _If you don't want to be super secure, you could also use 0.0.0.0 to open for everyone in the Internet._
- Protocols and ports: Allow **TCP** port **7860**.
- Click Create.


# 2. Create a VM instance
Derived from the page above, Follow my setup selections:

> Create a Linux VM instance

Note: You may run into an error saying you don't have enough **GPU quota** to create the VM. As stated [here](https://cloud.google.com/compute/docs/gpus/create-vm-with-gpus), you will need GPU quota to start an instance with GPU. Follow the instructions in [this page](https://cloud.google.com/docs/quota#viewing_your_quota_console) to check your GPU quota and request an increase of 1 GPU if needed.

- In the Google Cloud console, go to the **"Compute Engine" >> "VM instances"**, click **CREATE INSTANCE** .
- In the **Machine configuration**, select **GPUs**.
- - It will auto select **NVIDIA T4** type with number of **1** which is a good value option.
- - In the **Machine type**, choose either of these two:
- - - n1-highmem-2 (2 vCPU, 13 GB memory)
- - - n1-standard-4 (4 vCPU, 15 GB memory)
- - - Note: In theory, 1 vCPU with 8 GB mem should be enough. I tested 1vCPU+7.5GB it ate all the mem resulting in much slower response.
- In the **Boot disk** section, click Change to begin configuring your boot disk.
- - On the Public images tab, choose **Ubuntu** from the Operating system list.
- - Choose **Ubuntu 22.04 LTS 📍Minimal x86/64** from the Version list.
- - Change Boot disk type to **Standard persistent disk** because 30 GB of such disk is in free tier.
- - Change size to **25 GB**. (This should be sufficient)
- - - in the "Advanced options" below, it's desirable to set "Deletion rule: When deleting instance" to "Delete boot disk"
- - Click Select.
- In the **Firewall** section, select **Allow HTTP traffic**.
- (Optional but 💵)To use the low-price luck-testing **Spot** (could be interrupted any time) pricing: 
- - Scroll down and click open the **Management** tab, find the **Availability policies**, and switch **VM provisioning model** to "**Spot**". Note the **On VM termination** should be **Stop** if you don't want to lose your generated images.
- Now check the estimated price at the top right corner. It should be like tens of cents/hour for non-Spot, or 10+ cents/hour for **Spot**.
- To create the VM, click Create.



The VM will **auto start** after creation. So don't forget about it because you are charged from now on.
To find your VM instance, use the left navigation bar and go to "Compute Engine" >> "VM instances".

# 3. Initial Configuration


## 3.1 SSH connect to the VM

- Go to the "VM instances" page, **start** your instance if you haven't. After a while, the **SSH** button under the "Connect" column will light up.

- Click the **SSH** button. You will have access to the command line in a new window.

## 3.2 Initialize
_I am not an expert in this, so please point out if I am being unprofessional.😜_
First get a few basic tools. (Some should be already included.)
```
sudo apt-get update
sudo apt -y install wget git python3 
```

The Ubuntu image doesn't come with GPU driver. So we need to install following the instruction from Google. https://cloud.google.com/compute/docs/gpus/install-drivers-gpu

```
curl https://raw.githubusercontent.com/GoogleCloudPlatform/compute-gpu-installation/main/linux/install_gpu_driver.py --output install_gpu_driver.py
sudo python3 install_gpu_driver.py
```
Now you can test if GPU driver is properly installed using `sudo nvidia-smi`

Install some dependencies. This worked for me but experts may find a subset of it would also work.
```
sudo apt -y install python3-venv python3-pip
sudo apt-get install -y python3-opencv
```

Now clone the stable-diffusion-webui.
```
git clone  https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
```
If you will use its default sd-1.5, then move ahead. If you don't want webui to download sd-1.5, now you should download your desired ckpt to its model folder. Example: `wget [URL to .safetensors] -P stable-diffusion-webui/models/Stable-diffusion/`
If you use other extensions, additional networks, you should also get them into respective folders.

And now launch the webui as below. With the `--xformers`, the program will install xformers along with pytorch and other dependencies.
```
stable-diffusion-webui/webui.sh --listen --xformers 
```
After installation, it will load the model and then show you can access by localhost:7860.

# 4. Access the webui
_If you used `--share` at the end of the bash sentence above, then you can use the link given by the program._ 

If you have set up the firewall rule:
Go to the "VM instances" page, copy the **External IP** of your instance. Paste it to your browser and add `:7860` then GO.
Now you should see the webui in your browser.😉

To get your generated imaged, **right click on the image and "Save As"**. Don't click the "Save" button on the webpage.

If you want to directly manipulate/get the image files from the console, please refer to Linux guidebooks.

# 5. Shut down
After you finished, you can directly click **STOP** in the "VM instances" page. 

- If you leave it here, you will not need to do Step 2-3 again. Next time just START the VM and SSH in then run the same
```
stable-diffusion-webui/webui.sh --listen --xformers 
```
You will not be charged for the CPU/GPU when it is not running, and the 25 GB standard persistent disk is within 30 GB/month **free tier**, meaning at least if you only have this one disk at all times, you won't be charged.

- If you delete the instance, then next time you will need to go over Step 2-3 again.

# 6. Deal with Spot scheduling
I have too short experience with Google cloud to bring a clear pattern as for what time/machine would see less interruption. As Google suggested, try nights and weekends. Note that you can't change between regular and Spot, so I suggest the initial set up should be done in afterhours to avoid interruptions. (Other smart ways available)
When Google needs to take over (stop, shut down, preempty, whatever) your Spot VM, you won't notice anything other than no response for ~ 1 minute. Then the SSH will disconnect and you will see your instance is stopped. If you are interrupted halfway, you can later restart the VM and look for the generated images in the "output" folder.

# 7. Clean up
As I said in the beginning, if you worry about charges, just delete everything when you feel you won't return for a while.

_Thanks to @missionfloyd for suggestions.
This article is only for learning and testing purpose with no warranty at all. Reader takes all responsibility for following any of these steps.
Google Cloud documents were licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/).
Distribution or deriviation of this article should include a link to its sourse (this page)._
